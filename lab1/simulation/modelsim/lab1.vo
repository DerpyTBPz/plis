// Copyright (C) 1991-2009 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// VENDOR "Altera"
// PROGRAM "Quartus II"
// VERSION "Version 9.0 Build 132 02/25/2009 SJ Full Version"

// DATE "10/16/2024 13:52:31"

// 
// Device: Altera EP1K30TC144-3 Package TQFP144
// 

// 
// This Verilog file should be used for ModelSim-Altera (Verilog) only
// 

`timescale 1 ps/ 1 ps

module mux41 (
	d,
	sel,
	out);
input 	[3:0] d;
input 	[1:0] sel;
output 	out;

wire gnd = 1'b0;
wire vcc = 1'b1;

tri1 devclrn;
tri1 devpor;
tri1 devoe;
// synopsys translate_off
initial $sdf_annotate("lab1_v.sdo");
// synopsys translate_on

wire \M2|out~1_combout ;
wire \M2|out~2_combout ;
wire [3:0] \d~dataout ;
wire [1:0] \sel~dataout ;


// atom is at PIN_124
flex10ke_io \d[2]~I (
	.datain(gnd),
	.clk(gnd),
	.ena(vcc),
	.aclr(gnd),
	.oe(gnd),
	.devclrn(devclrn),
	.devpor(devpor),
	.devoe(devoe),
	.dataout(\d~dataout [2]),
	.padio(d[2]));
// synopsys translate_off
defparam \d[2]~I .feedback_mode = "from_pin";
defparam \d[2]~I .operation_mode = "input";
defparam \d[2]~I .reg_source_mode = "none";
// synopsys translate_on

// atom is at PIN_126
flex10ke_io \sel[1]~I (
	.datain(gnd),
	.clk(gnd),
	.ena(vcc),
	.aclr(gnd),
	.oe(gnd),
	.devclrn(devclrn),
	.devpor(devpor),
	.devoe(devoe),
	.dataout(\sel~dataout [1]),
	.padio(sel[1]));
// synopsys translate_off
defparam \sel[1]~I .feedback_mode = "from_pin";
defparam \sel[1]~I .operation_mode = "input";
defparam \sel[1]~I .reg_source_mode = "none";
// synopsys translate_on

// atom is at PIN_54
flex10ke_io \d[1]~I (
	.datain(gnd),
	.clk(gnd),
	.ena(vcc),
	.aclr(gnd),
	.oe(gnd),
	.devclrn(devclrn),
	.devpor(devpor),
	.devoe(devoe),
	.dataout(\d~dataout [1]),
	.padio(d[1]));
// synopsys translate_off
defparam \d[1]~I .feedback_mode = "from_pin";
defparam \d[1]~I .operation_mode = "input";
defparam \d[1]~I .reg_source_mode = "none";
// synopsys translate_on

// atom is at PIN_56
flex10ke_io \sel[0]~I (
	.datain(gnd),
	.clk(gnd),
	.ena(vcc),
	.aclr(gnd),
	.oe(gnd),
	.devclrn(devclrn),
	.devpor(devpor),
	.devoe(devoe),
	.dataout(\sel~dataout [0]),
	.padio(sel[0]));
// synopsys translate_off
defparam \sel[0]~I .feedback_mode = "from_pin";
defparam \sel[0]~I .operation_mode = "input";
defparam \sel[0]~I .reg_source_mode = "none";
// synopsys translate_on

// atom is at PIN_125
flex10ke_io \d[0]~I (
	.datain(gnd),
	.clk(gnd),
	.ena(vcc),
	.aclr(gnd),
	.oe(gnd),
	.devclrn(devclrn),
	.devpor(devpor),
	.devoe(devoe),
	.dataout(\d~dataout [0]),
	.padio(d[0]));
// synopsys translate_off
defparam \d[0]~I .feedback_mode = "from_pin";
defparam \d[0]~I .operation_mode = "input";
defparam \d[0]~I .reg_source_mode = "none";
// synopsys translate_on

// atom is at LC1_B8
flex10ke_lcell \M2|out~1 (
// Equation(s):
// \M2|out~1_combout  = \sel~dataout [1] & (\sel~dataout [0]) # !\sel~dataout [1] & (\sel~dataout [0] & \d~dataout [1] # !\sel~dataout [0] & (\d~dataout [0]))

	.dataa(\sel~dataout [1]),
	.datab(\d~dataout [1]),
	.datac(\sel~dataout [0]),
	.datad(\d~dataout [0]),
	.aclr(gnd),
	.aload(gnd),
	.clk(gnd),
	.cin(gnd),
	.cascin(vcc),
	.devclrn(devclrn),
	.devpor(devpor),
	.combout(\M2|out~1_combout ),
	.regout(),
	.cout(),
	.cascout());
// synopsys translate_off
defparam \M2|out~1 .clock_enable_mode = "false";
defparam \M2|out~1 .lut_mask = "e5e0";
defparam \M2|out~1 .operation_mode = "normal";
defparam \M2|out~1 .output_mode = "comb_only";
defparam \M2|out~1 .packed_mode = "false";
// synopsys translate_on

// atom is at PIN_55
flex10ke_io \d[3]~I (
	.datain(gnd),
	.clk(gnd),
	.ena(vcc),
	.aclr(gnd),
	.oe(gnd),
	.devclrn(devclrn),
	.devpor(devpor),
	.devoe(devoe),
	.dataout(\d~dataout [3]),
	.padio(d[3]));
// synopsys translate_off
defparam \d[3]~I .feedback_mode = "from_pin";
defparam \d[3]~I .operation_mode = "input";
defparam \d[3]~I .reg_source_mode = "none";
// synopsys translate_on

// atom is at LC2_B8
flex10ke_lcell \M2|out~2 (
// Equation(s):
// \M2|out~2_combout  = \sel~dataout [1] & (\M2|out~1_combout  & (\d~dataout [3]) # !\M2|out~1_combout  & \d~dataout [2]) # !\sel~dataout [1] & (\M2|out~1_combout )

	.dataa(\d~dataout [2]),
	.datab(\sel~dataout [1]),
	.datac(\M2|out~1_combout ),
	.datad(\d~dataout [3]),
	.aclr(gnd),
	.aload(gnd),
	.clk(gnd),
	.cin(gnd),
	.cascin(vcc),
	.devclrn(devclrn),
	.devpor(devpor),
	.combout(\M2|out~2_combout ),
	.regout(),
	.cout(),
	.cascout());
// synopsys translate_off
defparam \M2|out~2 .clock_enable_mode = "false";
defparam \M2|out~2 .lut_mask = "f838";
defparam \M2|out~2 .operation_mode = "normal";
defparam \M2|out~2 .output_mode = "comb_only";
defparam \M2|out~2 .packed_mode = "false";
// synopsys translate_on

// atom is at PIN_99
flex10ke_io \out~I (
	.datain(\M2|out~2_combout ),
	.clk(gnd),
	.ena(vcc),
	.aclr(gnd),
	.oe(vcc),
	.devclrn(devclrn),
	.devpor(devpor),
	.devoe(devoe),
	.dataout(),
	.padio(out));
// synopsys translate_off
defparam \out~I .feedback_mode = "none";
defparam \out~I .operation_mode = "output";
defparam \out~I .reg_source_mode = "none";
// synopsys translate_on

endmodule
