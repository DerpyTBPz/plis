// Copyright (C) 1991-2009 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// VENDOR "Altera"
// PROGRAM "Quartus II"
// VERSION "Version 9.0 Build 132 02/25/2009 SJ Full Version"

// DATE "10/23/2024 15:39:03"

// 
// Device: Altera EP1K30TC144-3 Package TQFP144
// 

// 
// This Verilog file should be used for ModelSim-Altera (Verilog) only
// 

`timescale 1 ps/ 1 ps

module SM8 (
	clk,
	rst,
	out);
input 	clk;
input 	rst;
output 	out;

wire gnd = 1'b0;
wire vcc = 1'b1;

tri1 devclrn;
tri1 devpor;
tri1 devoe;
// synopsys translate_off
initial $sdf_annotate("lab4_v.sdo");
// synopsys translate_on

wire \rst~dataout ;
wire \clk~dataout ;
wire \state.001~regout ;
wire \state.010~regout ;
wire \state.011~regout ;
wire \state.100~regout ;
wire \state.101~regout ;
wire \state.110~regout ;
wire \state.111~regout ;
wire \state.000~regout ;


// atom is at PIN_126
flex10ke_io \rst~I (
	.datain(gnd),
	.clk(gnd),
	.ena(vcc),
	.aclr(gnd),
	.oe(gnd),
	.devclrn(devclrn),
	.devpor(devpor),
	.devoe(devoe),
	.dataout(\rst~dataout ),
	.padio(rst));
// synopsys translate_off
defparam \rst~I .feedback_mode = "from_pin";
defparam \rst~I .operation_mode = "input";
defparam \rst~I .reg_source_mode = "none";
// synopsys translate_on

// atom is at PIN_55
flex10ke_io \clk~I (
	.datain(gnd),
	.clk(gnd),
	.ena(vcc),
	.aclr(gnd),
	.oe(gnd),
	.devclrn(devclrn),
	.devpor(devpor),
	.devoe(devoe),
	.dataout(\clk~dataout ),
	.padio(clk));
// synopsys translate_off
defparam \clk~I .feedback_mode = "from_pin";
defparam \clk~I .operation_mode = "input";
defparam \clk~I .reg_source_mode = "none";
// synopsys translate_on

// atom is at LC8_C19
flex10ke_lcell \state.001 (
// Equation(s):
// \state.001~regout  = DFFEA(!\state.000~regout , GLOBAL(\clk~dataout ), !GLOBAL(\rst~dataout ), , , , )

	.dataa(vcc),
	.datab(vcc),
	.datac(vcc),
	.datad(\state.000~regout ),
	.aclr(\rst~dataout ),
	.aload(gnd),
	.clk(\clk~dataout ),
	.cin(gnd),
	.cascin(vcc),
	.devclrn(devclrn),
	.devpor(devpor),
	.combout(),
	.regout(\state.001~regout ),
	.cout(),
	.cascout());
// synopsys translate_off
defparam \state.001 .clock_enable_mode = "false";
defparam \state.001 .lut_mask = "00ff";
defparam \state.001 .operation_mode = "normal";
defparam \state.001 .output_mode = "reg_only";
defparam \state.001 .packed_mode = "false";
// synopsys translate_on

// atom is at LC7_C19
flex10ke_lcell \state.010 (
// Equation(s):
// \state.010~regout  = DFFEA(\state.001~regout , GLOBAL(\clk~dataout ), !GLOBAL(\rst~dataout ), , , , )

	.dataa(vcc),
	.datab(vcc),
	.datac(vcc),
	.datad(\state.001~regout ),
	.aclr(\rst~dataout ),
	.aload(gnd),
	.clk(\clk~dataout ),
	.cin(gnd),
	.cascin(vcc),
	.devclrn(devclrn),
	.devpor(devpor),
	.combout(),
	.regout(\state.010~regout ),
	.cout(),
	.cascout());
// synopsys translate_off
defparam \state.010 .clock_enable_mode = "false";
defparam \state.010 .lut_mask = "ff00";
defparam \state.010 .operation_mode = "normal";
defparam \state.010 .output_mode = "reg_only";
defparam \state.010 .packed_mode = "false";
// synopsys translate_on

// atom is at LC6_C19
flex10ke_lcell \state.011 (
// Equation(s):
// \state.011~regout  = DFFEA(\state.010~regout , GLOBAL(\clk~dataout ), !GLOBAL(\rst~dataout ), , , , )

	.dataa(vcc),
	.datab(vcc),
	.datac(vcc),
	.datad(\state.010~regout ),
	.aclr(\rst~dataout ),
	.aload(gnd),
	.clk(\clk~dataout ),
	.cin(gnd),
	.cascin(vcc),
	.devclrn(devclrn),
	.devpor(devpor),
	.combout(),
	.regout(\state.011~regout ),
	.cout(),
	.cascout());
// synopsys translate_off
defparam \state.011 .clock_enable_mode = "false";
defparam \state.011 .lut_mask = "ff00";
defparam \state.011 .operation_mode = "normal";
defparam \state.011 .output_mode = "reg_only";
defparam \state.011 .packed_mode = "false";
// synopsys translate_on

// atom is at LC4_C19
flex10ke_lcell \state.100 (
// Equation(s):
// \state.100~regout  = DFFEA(\state.011~regout , GLOBAL(\clk~dataout ), !GLOBAL(\rst~dataout ), , , , )

	.dataa(vcc),
	.datab(vcc),
	.datac(vcc),
	.datad(\state.011~regout ),
	.aclr(\rst~dataout ),
	.aload(gnd),
	.clk(\clk~dataout ),
	.cin(gnd),
	.cascin(vcc),
	.devclrn(devclrn),
	.devpor(devpor),
	.combout(),
	.regout(\state.100~regout ),
	.cout(),
	.cascout());
// synopsys translate_off
defparam \state.100 .clock_enable_mode = "false";
defparam \state.100 .lut_mask = "ff00";
defparam \state.100 .operation_mode = "normal";
defparam \state.100 .output_mode = "reg_only";
defparam \state.100 .packed_mode = "false";
// synopsys translate_on

// atom is at LC3_C19
flex10ke_lcell \state.101 (
// Equation(s):
// \state.101~regout  = DFFEA(\state.100~regout , GLOBAL(\clk~dataout ), !GLOBAL(\rst~dataout ), , , , )

	.dataa(vcc),
	.datab(vcc),
	.datac(vcc),
	.datad(\state.100~regout ),
	.aclr(\rst~dataout ),
	.aload(gnd),
	.clk(\clk~dataout ),
	.cin(gnd),
	.cascin(vcc),
	.devclrn(devclrn),
	.devpor(devpor),
	.combout(),
	.regout(\state.101~regout ),
	.cout(),
	.cascout());
// synopsys translate_off
defparam \state.101 .clock_enable_mode = "false";
defparam \state.101 .lut_mask = "ff00";
defparam \state.101 .operation_mode = "normal";
defparam \state.101 .output_mode = "reg_only";
defparam \state.101 .packed_mode = "false";
// synopsys translate_on

// atom is at LC2_C19
flex10ke_lcell \state.110 (
// Equation(s):
// \state.110~regout  = DFFEA(\state.101~regout , GLOBAL(\clk~dataout ), !GLOBAL(\rst~dataout ), , , , )

	.dataa(vcc),
	.datab(vcc),
	.datac(vcc),
	.datad(\state.101~regout ),
	.aclr(\rst~dataout ),
	.aload(gnd),
	.clk(\clk~dataout ),
	.cin(gnd),
	.cascin(vcc),
	.devclrn(devclrn),
	.devpor(devpor),
	.combout(),
	.regout(\state.110~regout ),
	.cout(),
	.cascout());
// synopsys translate_off
defparam \state.110 .clock_enable_mode = "false";
defparam \state.110 .lut_mask = "ff00";
defparam \state.110 .operation_mode = "normal";
defparam \state.110 .output_mode = "reg_only";
defparam \state.110 .packed_mode = "false";
// synopsys translate_on

// atom is at LC1_C19
flex10ke_lcell \state.111 (
// Equation(s):
// \state.111~regout  = DFFEA(\state.110~regout , GLOBAL(\clk~dataout ), !GLOBAL(\rst~dataout ), , , , )

	.dataa(vcc),
	.datab(vcc),
	.datac(vcc),
	.datad(\state.110~regout ),
	.aclr(\rst~dataout ),
	.aload(gnd),
	.clk(\clk~dataout ),
	.cin(gnd),
	.cascin(vcc),
	.devclrn(devclrn),
	.devpor(devpor),
	.combout(),
	.regout(\state.111~regout ),
	.cout(),
	.cascout());
// synopsys translate_off
defparam \state.111 .clock_enable_mode = "false";
defparam \state.111 .lut_mask = "ff00";
defparam \state.111 .operation_mode = "normal";
defparam \state.111 .output_mode = "reg_only";
defparam \state.111 .packed_mode = "false";
// synopsys translate_on

// atom is at LC5_C19
flex10ke_lcell \state.000 (
// Equation(s):
// \state.000~regout  = DFFEA(!\state.111~regout , GLOBAL(\clk~dataout ), !GLOBAL(\rst~dataout ), , , , )

	.dataa(vcc),
	.datab(vcc),
	.datac(vcc),
	.datad(\state.111~regout ),
	.aclr(\rst~dataout ),
	.aload(gnd),
	.clk(\clk~dataout ),
	.cin(gnd),
	.cascin(vcc),
	.devclrn(devclrn),
	.devpor(devpor),
	.combout(),
	.regout(\state.000~regout ),
	.cout(),
	.cascout());
// synopsys translate_off
defparam \state.000 .clock_enable_mode = "false";
defparam \state.000 .lut_mask = "00ff";
defparam \state.000 .operation_mode = "normal";
defparam \state.000 .output_mode = "reg_only";
defparam \state.000 .packed_mode = "false";
// synopsys translate_on

// atom is at PIN_51
flex10ke_io \out~I (
	.datain(!\state.000~regout ),
	.clk(gnd),
	.ena(vcc),
	.aclr(gnd),
	.oe(vcc),
	.devclrn(devclrn),
	.devpor(devpor),
	.devoe(devoe),
	.dataout(),
	.padio(out));
// synopsys translate_off
defparam \out~I .feedback_mode = "none";
defparam \out~I .operation_mode = "output";
defparam \out~I .reg_source_mode = "none";
// synopsys translate_on

endmodule
